---
name: Release (macOS)

"on":
  release:
    types: [published]

permissions:
  contents: write

env:
  APP_NAME: Annotate
  SCHEME: Annotate

jobs:
  build:
    name: Build & Archive
    runs-on: macos-15
    environment: release
    outputs:
      archive-path: ${{ steps.build.outputs.archive-path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Install xcpretty
        run: gem install xcpretty --no-document

      - name: Build and archive
        id: build
        run: |
          ./scripts/ci/build_and_archive.sh \
            "${{ github.event.release.tag_name }}"
          echo "archive-path=build/Annotate.xcarchive" >> "$GITHUB_OUTPUT"

      - name: Upload archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: archive
          path: build/
          retention-days: 1

  sign-notarize:
    name: Sign & Notarize
    runs-on: macos-15
    needs: build
    environment: release
    outputs:
      dmg-path: ${{ steps.notarize.outputs.DMG_PATH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download archive artifact
        uses: actions/download-artifact@v4
        with:
          name: archive
          path: ./

      - name: Debug - List downloaded files
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Build directory contents:"
          ls -la build/ || echo "No build directory found"
          echo "Looking for .xcarchive files:"
          find . -name "*.xcarchive" -type d

      - name: Inject TEAM_ID into ExportOptions
        run: |
          sed "s/__TEAM_ID__/${{ secrets.TEAM_ID }}/" \
            "packaging/ExportOptions.plist" > \
            "packaging/ExportOptions.plist.out"
          mv "packaging/ExportOptions.plist.out" "packaging/ExportOptions.plist"

      - name: Import Developer ID certificate
        uses: apple-actions/import-codesign-certs@v5
        with:
          p12-file-base64: ${{ secrets.MACOS_CERT_BASE64 }}
          p12-password: ${{ secrets.MACOS_CERT_PASSWORD }}

      - name: Sign and notarize
        id: notarize
        run: |
          ./scripts/ci/sign_and_notarize.sh \
            "${{ secrets.NOTARIZE_APPLE_ID }}" \
            "${{ secrets.NOTARIZE_PASSWORD }}" \
            "${{ secrets.TEAM_ID }}"

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: dmg
          path: ${{ steps.notarize.outputs.DMG_PATH }}
          retention-days: 30

  publish:
    name: Publish & Update Appcast
    runs-on: macos-15
    needs: [build, sign-notarize]
    environment: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download DMG artifact
        uses: actions/download-artifact@v4
        with:
          name: dmg
          path: ./

      - name: Download archive artifact (for bundle version)
        uses: actions/download-artifact@v4
        with:
          name: archive
          path: ./

      - name: Prepare release metadata
        id: release_notes
        run: |
          ./scripts/ci/prepare_release.sh \
            "${{ github.event.release.tag_name }}" \
            "${{ github.event.release.body }}" \
            "${{ github.event.release.prerelease }}"

      - name: Generate appcast signature
        id: appcast
        run: |
          DMG_PATH=$(find . -name "*.dmg" -type f | head -1)
          echo "DMG_PATH=$DMG_PATH" >> "$GITHUB_OUTPUT"
          ./scripts/ci/generate_appcast.sh \
            "$DMG_PATH" \
            "${{ secrets.SPARKLE_PRIVATE_KEY }}"

      - name: Upload DMG to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          files: "*.dmg"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update appcast.xml
        # if: ${{ steps.release_notes.outputs.is_prerelease == 'false' }}
        run: |
          ./scripts/ci/update_appcast.sh \
            "${{ github.event.release.tag_name }}" \
            "${{ steps.release_notes.outputs.semantic_version }}" \
            "${{ steps.appcast.outputs.bundle_version }}" \
            "${{ steps.appcast.outputs.signature }}" \
            "${{ steps.appcast.outputs.file_size }}" \
            "${{ steps.appcast.outputs.DMG_PATH }}" \
            "${{ steps.release_notes.outputs.release_body }}"

      - name: Commit updated appcast
        # if: ${{ steps.release_notes.outputs.is_prerelease == 'false' }}
        run: |
          git config --local user.email \
            "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add appcast.xml
          git commit -m \
            "chore: Update appcast.xml for ${{ github.event.release.tag_name }}"
          git push origin HEAD:auto-update

      # - name: Skip appcast update (prerelease)
      #   if: ${{ steps.release_notes.outputs.is_prerelease == 'true' }}
      #   run: |
      #     echo "⚠️  Skipping appcast update for prerelease \
      #       ${{ github.event.release.tag_name }}"
      #     echo "   Users will not be notified of this beta/RC \
      #       version via auto-updates"
